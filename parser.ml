type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | COLON
  | LBRACKET
  | RBRACKET
  | FUNC_DECL
  | FUNC_ARROW
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | NONE
  | STRING
  | LIST
  | ARRAY
  | INTLIT of (int)
  | STRINGLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 50 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* COLON *);
  264 (* LBRACKET *);
  265 (* RBRACKET *);
  266 (* FUNC_DECL *);
  267 (* FUNC_ARROW *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIVIDE *);
  272 (* ASSIGN *);
  273 (* NOT *);
  274 (* EQ *);
  275 (* NEQ *);
  276 (* LT *);
  277 (* LEQ *);
  278 (* GT *);
  279 (* GEQ *);
  280 (* TRUE *);
  281 (* FALSE *);
  282 (* AND *);
  283 (* OR *);
  284 (* RETURN *);
  285 (* IF *);
  286 (* ELSE *);
  287 (* FOR *);
  288 (* WHILE *);
  289 (* INT *);
  290 (* BOOL *);
  291 (* NONE *);
  292 (* STRING *);
  293 (* LIST *);
  294 (* ARRAY *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  295 (* INTLIT *);
  296 (* STRINGLIT *);
  297 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\005\000\005\000\008\000\
\008\000\006\000\006\000\009\000\009\000\009\000\009\000\010\000\
\010\000\007\000\007\000\011\000\011\000\003\000\003\000\003\000\
\012\000\013\000\016\000\016\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\017\000\017\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\018\000\018\000\
\019\000\019\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\011\000\000\000\001\000\002\000\
\004\000\001\000\004\000\001\000\001\000\001\000\001\000\001\000\
\001\000\000\000\001\000\001\000\002\000\001\000\001\000\001\000\
\003\000\005\000\000\000\002\000\002\000\002\000\003\000\003\000\
\006\000\009\000\010\000\006\000\000\000\001\000\001\000\001\000\
\001\000\001\000\001\000\004\000\004\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\004\000\003\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\067\000\000\000\000\000\027\000\000\000\000\000\
\000\000\041\000\042\000\000\000\000\000\000\000\000\000\012\000\
\013\000\014\000\015\000\000\000\000\000\039\000\040\000\000\000\
\001\000\003\000\004\000\000\000\010\000\000\000\022\000\023\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\059\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\062\000\032\000\028\000\000\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\000\000\000\000\000\000\000\000\000\048\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\000\000\045\000\061\000\000\000\011\000\000\000\008\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\
\000\000\036\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\034\000\000\000\020\000\000\000\000\000\035\000\
\005\000\021\000"

let yydgoto = "\002\000\
\003\000\004\000\026\000\027\000\098\000\028\000\134\000\100\000\
\029\000\030\000\135\000\031\000\032\000\033\000\034\000\038\000\
\073\000\076\000\077\000"

let yysindex = "\038\000\
\000\000\000\000\000\000\041\000\169\255\000\000\028\255\169\255\
\169\255\000\000\000\000\071\255\076\255\079\255\081\255\000\000\
\000\000\000\000\000\000\077\255\078\255\000\000\000\000\002\255\
\000\000\000\000\000\000\046\255\000\000\069\255\000\000\000\000\
\000\000\226\255\077\255\078\255\030\001\129\255\090\255\000\000\
\000\000\000\000\098\000\169\255\169\255\169\255\169\255\169\255\
\169\255\169\255\033\255\114\255\000\000\169\255\169\255\169\255\
\169\255\169\255\169\255\169\255\169\255\169\255\169\255\169\255\
\169\255\000\000\000\000\000\000\102\255\000\000\051\001\088\001\
\096\255\072\001\088\001\092\255\093\255\095\255\104\255\088\001\
\000\000\169\255\083\255\012\255\012\255\000\000\000\000\243\255\
\243\255\166\255\166\255\166\255\166\255\119\001\104\001\000\000\
\000\000\112\255\057\255\110\255\125\255\169\255\134\255\000\000\
\169\255\000\000\000\000\114\000\000\000\132\255\000\000\102\255\
\160\255\130\000\160\255\088\001\000\000\102\255\103\255\115\255\
\169\255\000\000\144\255\000\000\145\255\152\255\155\255\160\255\
\149\255\089\255\000\000\160\255\000\000\158\255\089\255\000\000\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\154\255\156\255\000\000\000\000\010\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\164\255\000\000\163\255\163\255\
\172\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\180\255\000\000\000\000\064\255\
\000\000\000\000\255\254\000\000\006\255\000\000\000\000\065\255\
\000\000\000\000\000\000\210\255\082\000\000\000\000\000\009\001\
\013\001\157\000\184\000\211\000\238\000\020\001\011\255\000\000\
\000\000\000\000\000\000\184\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\073\255\000\000\000\000\000\000\001\000\
\187\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\190\255\000\000\000\000\000\000\000\000\191\255\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\161\255\000\000\000\000\208\255\000\000\000\000\
\150\000\000\000\000\000\000\000\000\000\218\255\254\255\000\000\
\083\000\002\000\000\000"

let yytablesize = 654
let yytable = "\068\000\
\033\000\065\000\037\000\049\000\065\000\040\000\041\000\065\000\
\064\000\043\000\043\000\057\000\043\000\057\000\064\000\043\000\
\057\000\050\000\043\000\057\000\099\000\043\000\043\000\043\000\
\043\000\056\000\057\000\043\000\043\000\043\000\043\000\043\000\
\043\000\081\000\133\000\043\000\043\000\057\000\001\000\138\000\
\025\000\071\000\072\000\074\000\075\000\075\000\075\000\080\000\
\082\000\078\000\079\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\119\000\
\038\000\060\000\038\000\060\000\039\000\123\000\060\000\042\000\
\005\000\060\000\120\000\066\000\122\000\044\000\066\000\108\000\
\045\000\066\000\046\000\008\000\047\000\048\000\051\000\009\000\
\052\000\131\000\005\000\069\000\006\000\136\000\010\000\011\000\
\102\000\111\000\105\000\114\000\104\000\008\000\116\000\106\000\
\109\000\009\000\107\000\035\000\036\000\022\000\023\000\024\000\
\010\000\011\000\110\000\112\000\012\000\013\000\072\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\005\000\113\000\006\000\067\000\016\000\017\000\
\018\000\019\000\096\000\097\000\115\000\008\000\118\000\124\000\
\125\000\009\000\016\000\017\000\018\000\019\000\127\000\128\000\
\010\000\011\000\129\000\132\000\012\000\013\000\130\000\014\000\
\015\000\005\000\137\000\006\000\037\000\035\000\036\000\022\000\
\023\000\024\000\005\000\063\000\008\000\016\000\063\000\017\000\
\009\000\054\000\055\000\056\000\057\000\008\000\006\000\010\000\
\011\000\009\000\007\000\012\000\013\000\037\000\014\000\015\000\
\010\000\011\000\018\000\019\000\035\000\036\000\022\000\023\000\
\024\000\083\000\000\000\126\000\000\000\035\000\036\000\022\000\
\023\000\024\000\046\000\000\000\046\000\000\000\000\000\046\000\
\000\000\000\000\046\000\000\000\000\000\046\000\046\000\000\000\
\000\000\000\000\053\000\046\000\046\000\046\000\046\000\046\000\
\046\000\000\000\000\000\046\000\046\000\054\000\055\000\056\000\
\057\000\000\000\000\000\058\000\059\000\060\000\061\000\062\000\
\063\000\000\000\000\000\064\000\065\000\000\000\054\000\055\000\
\056\000\057\000\033\000\000\000\033\000\033\000\060\000\061\000\
\062\000\063\000\033\000\000\000\000\000\033\000\000\000\000\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\033\000\000\000\000\000\033\000\033\000\000\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\005\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\008\000\000\000\000\000\
\000\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\011\000\000\000\000\000\012\000\013\000\000\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\047\000\000\000\047\000\000\000\000\000\047\000\
\000\000\000\000\047\000\000\000\000\000\047\000\047\000\000\000\
\000\000\000\000\070\000\047\000\047\000\047\000\047\000\047\000\
\047\000\000\000\000\000\047\000\047\000\054\000\055\000\056\000\
\057\000\000\000\117\000\058\000\059\000\060\000\061\000\062\000\
\063\000\000\000\000\000\064\000\065\000\054\000\055\000\056\000\
\057\000\000\000\121\000\058\000\059\000\060\000\061\000\062\000\
\063\000\000\000\000\000\064\000\065\000\054\000\055\000\056\000\
\057\000\000\000\000\000\058\000\059\000\060\000\061\000\062\000\
\063\000\000\000\000\000\064\000\065\000\052\000\000\000\052\000\
\000\000\000\000\052\000\000\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\052\000\
\052\000\052\000\052\000\052\000\000\000\000\000\052\000\052\000\
\053\000\000\000\053\000\000\000\000\000\053\000\000\000\000\000\
\053\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\053\000\053\000\053\000\053\000\053\000\000\000\
\000\000\053\000\053\000\054\000\000\000\054\000\000\000\000\000\
\054\000\000\000\000\000\054\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\000\000\054\000\054\000\055\000\000\000\
\055\000\000\000\000\000\055\000\000\000\000\000\055\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\055\000\055\000\055\000\055\000\055\000\000\000\000\000\055\000\
\055\000\050\000\000\000\050\000\000\000\051\000\050\000\051\000\
\000\000\050\000\051\000\000\000\056\000\051\000\056\000\000\000\
\000\000\056\000\050\000\050\000\056\000\000\000\051\000\051\000\
\066\000\000\000\050\000\050\000\000\000\000\000\051\000\051\000\
\000\000\054\000\055\000\056\000\057\000\056\000\056\000\058\000\
\059\000\060\000\061\000\062\000\063\000\101\000\000\000\064\000\
\065\000\000\000\000\000\000\000\000\000\000\000\054\000\055\000\
\056\000\057\000\000\000\000\000\058\000\059\000\060\000\061\000\
\062\000\063\000\103\000\000\000\064\000\065\000\000\000\000\000\
\000\000\000\000\000\000\054\000\055\000\056\000\057\000\000\000\
\000\000\058\000\059\000\060\000\061\000\062\000\063\000\000\000\
\000\000\064\000\065\000\054\000\055\000\056\000\057\000\000\000\
\000\000\058\000\059\000\060\000\061\000\062\000\063\000\000\000\
\000\000\064\000\065\000\054\000\055\000\056\000\057\000\000\000\
\000\000\058\000\059\000\060\000\061\000\062\000\063\000\000\000\
\000\000\064\000\054\000\055\000\056\000\057\000\000\000\000\000\
\058\000\059\000\060\000\061\000\062\000\063\000"

let yycheck = "\038\000\
\000\000\003\001\005\000\002\001\006\001\008\000\009\000\009\001\
\003\001\012\000\001\001\001\001\003\001\003\001\009\001\006\001\
\006\001\016\001\009\001\009\001\069\000\012\001\013\001\014\001\
\015\001\014\001\015\001\018\001\019\001\020\001\021\001\022\001\
\023\001\001\001\130\000\026\001\027\001\027\001\001\000\135\000\
\000\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\016\001\048\000\049\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\112\000\
\001\001\001\001\003\001\003\001\041\001\118\000\006\001\001\001\
\002\001\009\001\113\000\003\001\115\000\002\001\006\001\082\000\
\002\001\009\001\002\001\013\001\008\001\008\001\041\001\017\001\
\020\001\128\000\002\001\002\001\004\001\132\000\024\001\025\001\
\001\001\041\001\006\001\102\000\009\001\013\001\105\000\009\001\
\022\001\017\001\003\001\037\001\038\001\039\001\040\001\041\001\
\024\001\025\001\003\001\006\001\028\001\029\001\121\000\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\002\001\007\001\004\001\005\001\033\001\034\001\
\035\001\036\001\037\001\038\001\007\001\013\001\011\001\041\001\
\030\001\017\001\033\001\034\001\035\001\036\001\007\001\007\001\
\024\001\025\001\003\001\007\001\028\001\029\001\004\001\031\001\
\032\001\002\001\005\001\004\001\001\001\037\001\038\001\039\001\
\040\001\041\001\002\001\009\001\013\001\020\001\003\001\020\001\
\017\001\012\001\013\001\014\001\015\001\013\001\003\001\024\001\
\025\001\017\001\003\001\028\001\029\001\003\001\031\001\032\001\
\024\001\025\001\005\001\005\001\037\001\038\001\039\001\040\001\
\041\001\052\000\255\255\121\000\255\255\037\001\038\001\039\001\
\040\001\041\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\009\001\255\255\255\255\012\001\013\001\255\255\
\255\255\255\255\001\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\012\001\013\001\014\001\
\015\001\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\255\255\012\001\013\001\
\014\001\015\001\002\001\255\255\004\001\005\001\020\001\021\001\
\022\001\023\001\010\001\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\025\001\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\002\001\255\255\004\001\255\255\255\255\255\255\
\255\255\255\255\010\001\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\025\001\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\009\001\255\255\255\255\012\001\013\001\255\255\
\255\255\255\255\001\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\012\001\013\001\014\001\
\015\001\255\255\001\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\012\001\013\001\014\001\
\015\001\255\255\001\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\012\001\013\001\014\001\
\015\001\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\255\255\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\026\001\027\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\026\001\027\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\027\001\001\001\255\255\003\001\255\255\001\001\006\001\003\001\
\255\255\009\001\006\001\255\255\001\001\009\001\003\001\255\255\
\255\255\006\001\018\001\019\001\009\001\255\255\018\001\019\001\
\003\001\255\255\026\001\027\001\255\255\255\255\026\001\027\001\
\255\255\012\001\013\001\014\001\015\001\026\001\027\001\018\001\
\019\001\020\001\021\001\022\001\023\001\003\001\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\003\001\255\255\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\026\001\027\001\012\001\013\001\014\001\015\001\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\026\001\027\001\012\001\013\001\014\001\015\001\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\026\001\012\001\013\001\014\001\015\001\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  COLON\000\
  LBRACKET\000\
  RBRACKET\000\
  FUNC_DECL\000\
  FUNC_ARROW\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  NONE\000\
  STRING\000\
  LIST\000\
  ARRAY\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  STRINGLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 35 "parser.mly"
            ( List.rev _1 )
# 415 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
                 ( [] )
# 421 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'entry) in
    Obj.repr(
# 39 "parser.mly"
               ( (Entry(_2) :: _1) )
# 429 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdef) in
    Obj.repr(
# 40 "parser.mly"
              ( (Fdef(_2) :: _1) )
# 437 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'entry_list_opt) in
    Obj.repr(
# 44 "parser.mly"
     ( { formals = _4;
         rtyp = _7;
	 fname = _2;
	 body = _10 } )
# 450 "parser.ml"
               : 'fdef))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                  ( [] )
# 456 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 51 "parser.mly"
                  ( List.rev _1 )
# 463 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
             ( [(_1,_2)] )
# 471 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                             ( (_3, _4) :: _1 )
# 480 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ptyp) in
    Obj.repr(
# 58 "parser.mly"
         ( Ptyp(_1) )
# 487 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ctyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptyp) in
    Obj.repr(
# 59 "parser.mly"
                   ( Ctyp(_1, _3) )
# 495 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
        ( Int )
# 501 "parser.ml"
               : 'ptyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
         ( Bool )
# 507 "parser.ml"
               : 'ptyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
         ( None )
# 513 "parser.ml"
               : 'ptyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
           ( String )
# 519 "parser.ml"
               : 'ptyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
          ( List )
# 525 "parser.ml"
               : 'ctyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
          ( Array )
# 531 "parser.ml"
               : 'ctyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
                     ( [] )
# 537 "parser.ml"
               : 'entry_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'entry_list) in
    Obj.repr(
# 73 "parser.mly"
               ( List.rev _1 )
# 544 "parser.ml"
               : 'entry_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'entry) in
    Obj.repr(
# 76 "parser.mly"
          ( [_1] )
# 551 "parser.ml"
               : 'entry_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'entry_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'entry) in
    Obj.repr(
# 77 "parser.mly"
                     ( _2 :: _1 )
# 559 "parser.ml"
               : 'entry_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 80 "parser.mly"
          ( Vdecl(_1) )
# 566 "parser.ml"
               : 'entry))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdef) in
    Obj.repr(
# 81 "parser.mly"
          ( Vdef(_1) )
# 573 "parser.ml"
               : 'entry))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "parser.mly"
          ( Stmt(_1) )
# 580 "parser.ml"
               : 'entry))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 85 "parser.mly"
                ( (_1, _2) )
# 588 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                            ( (_1, _2, _4) )
# 597 "parser.ml"
               : 'vdef))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                  ( [] )
# 603 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
                   ( _2 :: _1 )
# 611 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
              ( Expr _1 )
# 618 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                ( Return Noexpr )
# 624 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                     ( Return _2 )
# 631 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 97 "parser.mly"
                            ( Block(List.rev _2) )
# 638 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 98 "parser.mly"
                                                  ( If(_3, _6, Block([])) )
# 646 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'stmt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 99 "parser.mly"
                                                        ( If(_3, _6, _9) )
# 655 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'expr_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 101 "parser.mly"
     ( For(_3, _5, _7, _10) )
# 665 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 102 "parser.mly"
                                        ( While(_3, _6) )
# 673 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                  ( Noexpr )
# 679 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                  ( _1 )
# 686 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 109 "parser.mly"
                    ( IntLit(_1) )
# 693 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                     ( StringLit(_1) )
# 700 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
                     ( BoolLit(true) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                     ( BoolLit(false) )
# 712 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
                     ( Id(_1) )
# 719 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 114 "parser.mly"
                                       ( ListC(_3) )
# 726 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 115 "parser.mly"
                                        ( ArrayC(_3) )
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 741 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 749 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 765 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 781 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 789 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 805 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 813 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 821 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 829 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                         ( Unop(Neg, _2) )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                     ( Unop(Not, _2) )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                   ( Assign(_1, _3) )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 131 "parser.mly"
                                 ( Call(_1, _3) )
# 859 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                       ( _2 )
# 866 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                  ( [] )
# 872 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 136 "parser.mly"
                  ( List.rev _1 )
# 879 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                            ( [_1] )
# 886 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                            ( _3 :: _1 )
# 894 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
